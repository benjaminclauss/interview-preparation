{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs For documentation visit mkdocs.org . mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#mkdocs","text":"For documentation visit mkdocs.org . mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"mkdocs"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Iuncis vulgatum ceu tectus Abluere erat Cytoriaco Lorem markdownum ducebat Iuppiter, pro ante ubi brevi stellis pulchra hunc esse non dumque pereat est. Iam mores potuitque esse. Sonant Anius, opem pastoris, vota num bidentes, pater, illis inexpugnabile primo ego cupiunt sustinet parenti. Crimine essent alto interea piget refert Iacit currus habitabile pascere erimus moenia Fuisset est deum nectar Equorum mergit quinquennia sorores quae forti parentem Leve est nam exercebat ignorant et pede Parentum relinquam in quoque aurea Tuae ubi rursus est figuras timidum et Ieiunia id suis incursat Surgit laeva tibi. Est dare, resupino posuerunt vadit valles, et hanc silendo vocatur mediae. software += restore; pushLanguagePrinter(-5, ergonomics_sd, readerMbr); webPingHashtag *= bar_goodput_compact(icann_atm, uml / 2 - ppi, encoding); php *= rteCrop(copy(583176, link_crt_tag + technology, 34 + jsp)); Inania bene, haec suis geruntur vinaque; facta est . O carcere liquefacta , furit mentoque, accipimus agrestes, has non movetur in carmine poscit simulavit. Esse eris nam Aeginam iacit me dixerunt laevum consule pedes. Audis enim Arcades animalia gemmas Medusae altissima. Et Perseus liquores addita Oblitus puer quae nunc videt tantoque, adspicio Haec, neu in facta ubi per pensandum medio, vertere. Ait acuta palmite humi: ex pudetque temporis Cythereius intremuit auctor. icsEbookWamp /= raidMaster.hard_dvd_drive(lcd_hard_google); osdKernelSequence.heapT = bugDdrSsid.docking(beta_cookie(8)) + shortcut( menu_num_port(1), ppmBarRdf + hertzEthics); var piracy_mouse = readme; if (dot_gbps = 4) { friendly_portal(-5); } else { gate += boxVrmlIo; dvi += trinitronBinAnsi; } In adurat cassis Atridae erubuit et inrita Sicyonius volucrum peperisse sunt Saturnia: cavas. Est ardet, veretur, terribilis situs et veloque omnes Ianthe direptos Dolona. Puellari turpique iam quoque etiam Stygias nec pretium seque, petis mihi forte Sithonios feruntur bisulcam, inquam gestumque iubet. Pigetque quod, nisi capiti nympha interea. Quo nec pependit putares victa eques in duabus illo caput.","title":"Iuncis vulgatum ceu tectus"},{"location":"about/#iuncis-vulgatum-ceu-tectus","text":"","title":"Iuncis vulgatum ceu tectus"},{"location":"about/#abluere-erat-cytoriaco","text":"Lorem markdownum ducebat Iuppiter, pro ante ubi brevi stellis pulchra hunc esse non dumque pereat est. Iam mores potuitque esse. Sonant Anius, opem pastoris, vota num bidentes, pater, illis inexpugnabile primo ego cupiunt sustinet parenti. Crimine essent alto interea piget refert Iacit currus habitabile pascere erimus moenia Fuisset est deum nectar Equorum mergit quinquennia sorores quae forti parentem Leve est nam exercebat ignorant et pede Parentum relinquam in quoque aurea","title":"Abluere erat Cytoriaco"},{"location":"about/#tuae-ubi-rursus-est-figuras-timidum-et","text":"Ieiunia id suis incursat Surgit laeva tibi. Est dare, resupino posuerunt vadit valles, et hanc silendo vocatur mediae. software += restore; pushLanguagePrinter(-5, ergonomics_sd, readerMbr); webPingHashtag *= bar_goodput_compact(icann_atm, uml / 2 - ppi, encoding); php *= rteCrop(copy(583176, link_crt_tag + technology, 34 + jsp)); Inania bene, haec suis geruntur vinaque; facta est . O carcere liquefacta , furit mentoque, accipimus agrestes, has non movetur in carmine poscit simulavit. Esse eris nam Aeginam iacit me dixerunt laevum consule pedes. Audis enim Arcades animalia gemmas Medusae altissima.","title":"Tuae ubi rursus est figuras timidum et"},{"location":"about/#et-perseus-liquores-addita","text":"Oblitus puer quae nunc videt tantoque, adspicio Haec, neu in facta ubi per pensandum medio, vertere. Ait acuta palmite humi: ex pudetque temporis Cythereius intremuit auctor. icsEbookWamp /= raidMaster.hard_dvd_drive(lcd_hard_google); osdKernelSequence.heapT = bugDdrSsid.docking(beta_cookie(8)) + shortcut( menu_num_port(1), ppmBarRdf + hertzEthics); var piracy_mouse = readme; if (dot_gbps = 4) { friendly_portal(-5); } else { gate += boxVrmlIo; dvi += trinitronBinAnsi; } In adurat cassis Atridae erubuit et inrita Sicyonius volucrum peperisse sunt Saturnia: cavas. Est ardet, veretur, terribilis situs et veloque omnes Ianthe direptos Dolona. Puellari turpique iam quoque etiam Stygias nec pretium seque, petis mihi forte Sithonios feruntur bisulcam, inquam gestumque iubet. Pigetque quod, nisi capiti nympha interea. Quo nec pependit putares victa eques in duabus illo caput.","title":"Et Perseus liquores addita"},{"location":"arrays-and-strings/","text":"Please note that array questions and string questions are often interchangeable. Hash Tables # Declare a dictionary. some_dict = {'Name': 'Ben', 'Age': 23} some_other_dict = dict() # Accessing the dictionary with its key. print(some_dict['Name']) # Update existing entry. some_dict['Name'] = 'Bob' # Remove entry. del some_dict['Name'] # Remove all entries. some_dict.clear() # Delete entire dictionary. del some_dict Arraylist Resizable Arrays Lists are resizable by default in Python. names = ['Ben', 'Bob', 'Bill'] some_list = list() for name in names: print(name) Amortized insertion runtime is O(1). StringBuilder some_name = 'Ben' some_name += ' Clauss'","title":"Arrays & Strings"},{"location":"arrays-and-strings/#hash-tables","text":"# Declare a dictionary. some_dict = {'Name': 'Ben', 'Age': 23} some_other_dict = dict() # Accessing the dictionary with its key. print(some_dict['Name']) # Update existing entry. some_dict['Name'] = 'Bob' # Remove entry. del some_dict['Name'] # Remove all entries. some_dict.clear() # Delete entire dictionary. del some_dict","title":"Hash Tables"},{"location":"arrays-and-strings/#arraylist-resizable-arrays","text":"Lists are resizable by default in Python. names = ['Ben', 'Bob', 'Bill'] some_list = list() for name in names: print(name) Amortized insertion runtime is O(1).","title":"Arraylist &amp; Resizable Arrays"},{"location":"arrays-and-strings/#stringbuilder","text":"some_name = 'Ben' some_name += ' Clauss'","title":"StringBuilder"},{"location":"linked-lists/","text":"A linked list is a data structure that represents a sequence of nodes. In a singly linked list, each node points to the next node in the linked list. A doubly linked list gives each node pointers to both the next node and the previous node. Unlike an array, a linked list does not provide constant time access to a particular \"index\" within the list. This means that if you'd like to find the Kth element in the list, you will need to iterate through K elements. The benefit of a linked list is that you can add and remove items from the beginning of the list in constant time. For specific applications, this can be useful. A number of linked list problems rely on recursion. If you're having trouble solving a linked list problem, you should explore if a recursive approach will work. Remember that recursive algorithms take at least O(n) space, where n is the depth of the recursive call. All recursive algorithms can be implemented iteratively, although they may be much more complex. class SingleNode: def __init__(self, value=None): self.value = value self.next = None class SingleLinkedList: def __init__(self): self.head = None def print(self): '''Print the list.''' node = self.head while node is not None: print(node.value) node = node.next class DoubleNode: def __init__(self, value=None): self.value = value self.next = None self.prev = None class DoubleLinkedList: def __init__(self): self.head = None def print(self): '''Print the list.''' node = self.head while node is not None: print(node.value) node = node.nextI The\"Runner\"Technique The \"runner\" (or second pointer) technique is used in many linked list problems. The runner technique means that you iterate through the linked list with two pointers simultaneously, with one ahead of the other. The \"fast\" node might be ahead by a fixed amount, or it might be hopping multiple nodes for each one node that the \"slow\" node iterates through.","title":"Linked Lists"},{"location":"linked-lists/#therunnertechnique","text":"The \"runner\" (or second pointer) technique is used in many linked list problems. The runner technique means that you iterate through the linked list with two pointers simultaneously, with one ahead of the other. The \"fast\" node might be ahead by a fixed amount, or it might be hopping multiple nodes for each one node that the \"slow\" node iterates through.","title":"The\"Runner\"Technique"},{"location":"search-and-sort/","text":"Binary Search def binary_search(array, target): n = len(array) low = 0 high = n - 1 while low = high: mid = (low + high) // 2 if array[mid] target: low = mid + 1 elif array[mid] target: high = mid - 1 else: return mid return -1","title":"Search & Sort Algorithms"},{"location":"search-and-sort/#binary-search","text":"def binary_search(array, target): n = len(array) low = 0 high = n - 1 while low = high: mid = (low + high) // 2 if array[mid] target: low = mid + 1 elif array[mid] target: high = mid - 1 else: return mid return -1","title":"Binary Search"},{"location":"stacks-and-queues/","text":"Stacks letters = [] # Add to stack. letters.append('a') letters.append('b') # Remove from stack. last_item = letters.pop() from collections import deque numbers = deque() # Use append like before to add elements. numbers.append(99) numbers.append(15) # You can pop like a stack. last_item = numbers.pop() class Stack: def __init__(self): self.stack = [] def pop(self): if len(self.stack) 1: return None return self.stack.pop() def push(self, item): self.stack.append(item) peek isEmpty def size(self): return len(self.stack) Queues fruits = [] # Add to queue. fruits.append('banana') fruits.append('grapes') # Remove from queue. first_item = fruits.pop(0) from collections import deque numbers = deque() # Use append like before to add elements. numbers.append(99) numbers.append(15) # You can pop like a stack. last_item = numbers.popleft() class Queue: def __init__(self): self.queue = [] def enqueue(self, item): self.queue.append(item) def dequeue(self): if len(self.queue) 1: return None return self.queue.pop(0) def size(self): return len(self.queue)","title":"Stacks & Queues"},{"location":"stacks-and-queues/#stacks","text":"letters = [] # Add to stack. letters.append('a') letters.append('b') # Remove from stack. last_item = letters.pop() from collections import deque numbers = deque() # Use append like before to add elements. numbers.append(99) numbers.append(15) # You can pop like a stack. last_item = numbers.pop() class Stack: def __init__(self): self.stack = [] def pop(self): if len(self.stack) 1: return None return self.stack.pop() def push(self, item): self.stack.append(item) peek isEmpty def size(self): return len(self.stack)","title":"Stacks"},{"location":"stacks-and-queues/#queues","text":"fruits = [] # Add to queue. fruits.append('banana') fruits.append('grapes') # Remove from queue. first_item = fruits.pop(0) from collections import deque numbers = deque() # Use append like before to add elements. numbers.append(99) numbers.append(15) # You can pop like a stack. last_item = numbers.popleft() class Queue: def __init__(self): self.queue = [] def enqueue(self, item): self.queue.append(item) def dequeue(self): if len(self.queue) 1: return None return self.queue.pop(0) def size(self): return len(self.queue)","title":"Queues"}]}